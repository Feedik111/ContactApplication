<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAHQAAACQAAAAZAAAADwAAAAgAAAADAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkXPlzLHThO6BkxQ9AKIjayBRwxkQQZ
        Km0DERxHAAAAKwAAAB0AAAASAAAACgAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACR0xGj1wmv0uZ5H/NGqS/zdo
        iv8xXHv/KE9s/yFDXf8dO1L0HDRH2Q4lOrwEHTGcBBkseQMVIVMAAAUxAAAAIQAAABUAAAAMAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfQ2NAQ3ad/zdu
        mP9FeqP/Rnqj/0V6o/9DeaL/QXeg/ztznP80bJX/N2mO/zNggP8rU3H/I0Zh/x09VvodN0viEys/xgYe
        NKYFHjKEBRwuWAAAABwAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJR
        dGdCdp3/PHOc/0Z7pP9Ge6T/Rnuk/0Z7pP9Ge6T/Rnuk/0Z7pP9GeqP/RXqj/0R5ov9Cd6D/PXSd/zVt
        l/82apD/N2WG/y9Zd/8mUG//H0xtyAANDRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABJVZ8jUF0nP9Bd6H/Rnuk/0Z7pP9Ge6T/Rnuk/0Z7pP9Ge6T/Rnuk/0Z7pP9Ge6T/Rnuk/0d7
        pP9He6T/Rnqk/0Z6o/9FeqP/RHmi/0N4of84bpf/KFFwSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAMtX4ayPnKa/0N6o/9Ge6X/Rnul/0Z7pf9Ge6X/Rnuk/0Z7pP9Ge6T/Rnuk/0Z7
        pP9He6T/R3uk/0d7pP9HfKX/R3ul/0Z7pP9He6T/R3uk/0p+pv8kTWd2AAAAIQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABzdqktU5cJj/RXuk/0Z7pf9GfKX/Rnyl/0Z8pf9GfKX/Rnyl/0Z7
        pf9Ge6X/Rnul/0Z7pf9Ge6T/Rnuk/0Z7pf9HfKX/R3ul/0d7pf9HfKX/T4Gq/wqLx/8BjMnHAAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPHKa9TdvmP9FfKX/RXyl/0Z8pv9GfKb/Rnym/0Z8
        pv9GfKb/Rnyl/0d8pf9HfKX/Rnyl/0Z7pf9HfKX/R3yl/0d8pf9HfKX/R3ym/0h9pv9Mg6z/AozL/wGV
        1LoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABc5USxCd5//NnCa/0Z9p/9Gfaf/R32n/0Z9
        p/9Gfaf/Rn2m/0d9pv9Hfaf/Rnym/0Z8pv9GfKX/Rnyl/0Z7pf9HfKb/R3ym/0d9pv9Ifab/SX6n/0CE
        sP8Cjs3/AZLPkgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIU9uU0J4oP85c53/Rn6n/0d+
        qP9Gfaf/R36o/0d+p/9Gfaf/RHql/0J4o/9DeaT/RHul/0Z8pv9GfKb/R32m/0d8pv9Hfab/R32n/0h9
        p/9Jfqj/NIKx/wKOzf8AjMlpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjV3t6Qnih/z54
        ov9Gfqj/Rn6o/0d/qf9Gfaj/QHej/zxxnv87cJ7/O3Cd/ztwnf87cJ3/PXKe/0N5o/9Hfaf/R32n/0d+
        p/9Hfaf/R32n/0l/qP8nbpf/Any0/wCBtj8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAidf
        haBAd6D/Q32n/0Z/qf9Hf6n/RX2o/z1zoP87cZ//O3Ge/ztxnv87cZ3/O3Cd/ztxnf87cJz/O3Cc/0B1
        oP9Hfqj/R36o/0d+qP9Hfqj/SoCp/1eoYP9Stl7+AFFzFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAFMWqRxDx1nv9Ff6r/RoCq/0Z/qf8+daL/Qnql/ztyn/87cp7/O3Ge/ztxnv87cZ3/O3Gd/ztx
        nf87cJz/O3Cc/0B2of9Hf6n/R36o/0d+qP9Ng6z/YbpU/3DRVekAAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAo4cprmOXSe/0aBq/9Hgav/QHml/0V+qf9Hgav/RH6o/z52ov87cZ7/O3Ge/ztx
        nf87cZ7/O3Gd/ztxnf87cZz/PXOe/0V9p/9Hf6n/R3+p/1CHqf9lw0r/b85UwgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACR0xGj95ov02dJ7/SIKt/0eBrP8/eKT/R4Ks/0eBrP9Ggav/RoGr/0J7
        pv87cp7/O3Ke/z51of9BeaT/Q3ul/0Z/qf9Ffqj/QHeh/0iBq/9IgKr/Uo+Y/2XESv9tylKaAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcTGk/Qn2l/zd2of9Hg67/RH6q/0J8qP9Hgq3/R4Kt/0eC
        rf9Hgqz/QHql/zpxnv86cZ3/RX+q/0iCrP9Igq3/SIKs/0iCrP8+dJ//SIKs/0iCrP9GiHr/Tq4y/2O9
        SHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACNXemZCfab/PXum/0iEr/9Cfan/Q36p/0eD
        rv9Hg67/R4Ou/0aBrP87c5//OnKe/zpxnv9Efqj/SIOt/0iDrf9Igq3/SIKt/z51oP9Igq3/SYOt/4eU
        dv+urEP/eqhARwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJF6EjUF8pf9CgKv/SIWv/0N+
        qf9Dfqn/R4Su/0eErv9Hg67/QHql/zpynv86cp7/OnKd/0F6pf9Hg67/SIOu/0eDrv9Ig67/PnWg/0iD
        rf9Kha//rKZv/+PDXv+qkkUhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMsaI+yPXqk/0WD
        rv9Hha//RIGs/0B7p/9Hha//R4Sv/0iFr/8/eaT/OnOe/zpynv86cp7/QXum/0iEr/9HhK7/SISu/0eD
        rf8+dqH/SYSv/02Isf/CrWD/4sNe8AAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzVx
        mtU6eaP/RoWw/0aFsP9HhbD/PXij/0aEr/9HhbD/R4Ww/zx2of86c57/OnOe/zpynf9Dfqn/SIWv/0iF
        r/9HhK//Qn2n/0N9p/9Jha//U4uw/9KxUf/evlzKAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAOPHmj9Td4o/9GhrD/R4ax/0aFsP9Cf6r/QHyn/0eGsP9HhrD/Qn6p/zpznv85cp3/OnOe/0aD
        rf9IhrD/SIWw/0eErv8+dqH/SIWw/0mGsP9diJn/wJ07/9KzUaIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABc7WCtCf6n/Nnmk/0eHsv9Hh7H/R4ex/0eHsf8/e6b/QX6p/0eGsf9HhrH/RYOu/0OA
        q/9GhK//R4ax/0eGsP9HhK//PXeh/0aDrf9Jh7H/Soex/2qPpv+qoIL/uaRneQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAH1N5UkOBq/86fKj/R4ey/0eHsv9Hh7L/R4ey/0iHsv9Bfqn/Pnmk/0SC
        rf9HhrH/R4ax/0eGsf9GhbD/Qn6o/z13ov9Gg67/SYey/0mHsv9KiLL/hKG2/8bIx/+ztrNUAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjXoR5QoCq/z+BrP9Gh7L/R4iy/0eIsv9IiLP/SIiz/0iI
        s/9FhbD/QH2n/z14o/89eKP/PXij/z55pP9DgKr/SIey/0iIsv9IiLL/SYiz/0uJs/+YrLn/yMrJ/52j
        nSoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAihljZ9Af6n/Q4Ww/0aHsv9HiLP/SImz/0iJ
        s/9IibP/SImz/0iIs/9HiLP/R4ey/0iIs/9HiLL/SIiz/0iIs/9IiLL/SIiy/0mIs/9IiLP/TYu1/6m0
        uv/Iysj2HBwcCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEM3GZwj19qP9Gh7L/Roiz/0iJ
        s/9IibT/SIm0/0mJtP9IibT/SImz/0iIs/9IiLP/R4iz/0iIs/9IiLP/SImz/0mJs/9IibP/SIiz/0mJ
        s/9Rjrf/ur29/8TFxNIAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCgKrEPn+p/0mK
        tf9JirX/SYq1/0mKtf9JirX/SYq1/0mKtf9JibT/SIm0/0eJs/9IibT/SIm0/0iJtP9IibT/SIm0/0mJ
        tP9IibT/SImz/1+Ttv/CxMP/w8XDqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFWZ
        uw9MjLY8VZG9aVOQupJSj7q6UY+64k+Ouf5Njbj/TIy3/0uLtv9KirX/SYq0/0iJtP9IibT/SYq0/0mK
        tf9KirX/SYq0/0mKtf9JirT/WI6zwcPGw1bKysonAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATomwDViTvzRVkbpdVJG7hVOPuq5RkLnWT4+5+U6N
        uP9MjLf/TIy2/0uLtv9Li7b/Sou1/0uLtv9TjLV9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAzZpkFVZa9J1aSvFBVkr14U5G8oVSRu8hTkbviV5O8pk6JsA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/AP///wAD//8AAA//AAAD/wAAA/4AAAP+AAAA/gAAAP4AAAD+AAAB/gA
        AAf4AAAH8AAAB/AAAAfwAAAH8AAAD/AAAA/wAAAP4AAAD+AAAA/gAAAP4AAAH+AAAB/gAAAf4AAAH8AA
        AB/AAAAfwAAAP+AAAD//gAD///4A//////8=
</value>
  </data>
</root>